#!/usr/bin/env node
import chalk from "chalk";
import inquirer from "inquirer";
import { createSpinner } from "nanospinner";
import fs from "fs";

let projectName;
let projectType;

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));


await askName();
await whatLang();

if (projectType === "Vanilla") {
  await createProjectVanilla();
} else if (projectType === "React") {
  createReactProject();
} else if (projectType === "Vue") {
  createVueProject();
} else if (projectType === "Svelte") {
  createSvelteProject();
}


sleep();

async function askName() {
  const answers = await inquirer.prompt({
    name: "project_name",
    type: "input",
    message: "The name of the project: ",
    default() {
      return "slx-project";
    },
  });

  projectName = answers.project_name;
}

async function whatLang() {
  const answers = inquirer.prompt({
    name: "question_1",
    type: "list",
    message: "Project language:",
    choices: [
      "React",
      "Vue",
      "Svelte",
      "Vanilla"
    ]
  });

  projectType = (await answers).question_1;
}

async function createProjectVanilla() {
  const spinner = createSpinner("Setting Up Data...").start();
  await sleep();

  try {
    // Create Folder
    fs.mkdirSync(projectName);
    fs.mkdirSync(`${projectName}/src`)

    // Create files
    fs.writeFileSync(`${projectName}/package.json`, String.raw`
    {
    "name": "${projectName}",
    "productName": "${projectName}",
    "version": "1.0.0",
    "description": "My Electron application description",
    "main": "src/index.js",
    "scripts": {
    "start": "electron-forge start",
    "package": "electron-forge package",
    "make": "electron-forge make",
    "publish": "electron-forge publish",
    "lint": "echo \"No linting configured\""
    },
    "keywords": [],
    "license": "MIT",
    "config": {
    "forge": {
    "packagerConfig": {},
    "makers": [
        {
        "name": "@electron-forge/maker-squirrel",
        "config": {
            "name": "xqclol"
        }
    },
    {
        "name": "@electron-forge/maker-zip",
        "platforms": [
            "darwin"
        ]
        },
        {
            "name": "@electron-forge/maker-deb",
            "config": {}
            },
            {
            "name": "@electron-forge/maker-rpm",
            "config": {}
            }
        ]
        }
    },
    "dependencies": {
        "electron-squirrel-startup": "^1.0.0"
    },
    "devDependencies": {
        "@electron-forge/cli": "^6.0.0-beta.65",
        "@electron-forge/maker-deb": "^6.0.0-beta.65",
        "@electron-forge/maker-rpm": "^6.0.0-beta.65",
        "@electron-forge/maker-squirrel": "^6.0.0-beta.65",
        "@electron-forge/maker-zip": "^6.0.0-beta.65",
        "electron": "20.0.3"
    }
    }`);

    fs.writeFileSync(`${projectName}/.gitignore`, String.raw`# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock
.DS_Store

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# Webpack
.webpack/

# Electron-Forge
out/

              `)

    fs.writeFileSync(`${projectName}/src/index.html`, `<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Observersâ„¢ X Electron</title>
    <link rel="stylesheet" href="index.css" />
  </head>
  <body>
    <nav class="drag">
      <div class="nav-links">
        <span class="no-drag" id="minimize">&minus;</span>
        <span class="no-drag" id="close">&#10006;</span>
      </div>
    </nav>

    <div class="app">
      <div class="images">
        <div class="image">
          <img src="https://media.discordapp.net/attachments/920261916704784414/1010709504788275271/observers.webp" alt="Observers Team Logo" />
        </div>
        <div class="image">
          <img src="https://media.discordapp.net/attachments/920261916704784414/1010709504456937523/electron.png?width=676&height=676" alt="ElectronJs Logo" />
        </div>
      </div>

      <h1>A very cool cli command made this ;)</h1>

      <div class="btn-counter">
        <button id="plus">0</button>
      </div>
    </div>

    <script>
      let count = 0;
      document.querySelector("#plus").addEventListener("click", () => {
        document.querySelector("#plus").innerHTML = count++;
      });

      const close = document.querySelector("#close");
      const minimize = document.querySelector("#minimize");

      close.addEventListener("click", api.exit);
      minimize.addEventListener("click", api.minimize);
    </script>
  </body>
</html>

        `);

    fs.writeFileSync(`${projectName}/src/index.css`, `body {
    background-color: #36393f;
    /* background-image: url("https://cdn.discordapp.com/splashes/755843597085179934/f23600962cd9cc6f18f1052e8784d694.jpg?size=2048"); */
    }
    
    nav {
    background-color: #202225;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 3rem;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: flex-end;
    user-select: none;
    }
    
    nav span {
    color: #fff;
    font-size: 2rem;
    margin-right: 2rem;
    cursor: pointer;
    }
    
    .drag {
    -webkit-app-region: drag;
    }
    
    .no-drag {
    -webkit-app-region: no-drag;
    }
    
    .images {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    margin-top: 5rem;
    }
    
    .image img[alt="Observers Team Logo"] {
    width: 10rem;
    border-radius: 100%;
    animation: rotate 3s linear infinite;
    margin-right: 1rem;
    }
    
    .image img[alt="ElectronJs Logo"] {
    width: 10rem;
    border-radius: 100%;
    animation: rotate 3s linear infinite;
    }
    
    .app h1 {
    color: #fff;
    text-align: center;
    margin-top: 2rem;
    }
    
    .btn-counter {
    display: grid;
    place-items: center;
    }
    
    .btn-counter button {
    width: 5rem;
    height: 2rem;
    border: none;
    background-color: #2f3136;
    border-radius: 0.3rem;
    color: #fff;
    cursor: pointer;
    transition: all 0.3s ease-out;
    }
    
    .btn-counter button:hover {
    background-color: #292b2f;
    }
    
    .btn-counter button:active {
    transform: translateY(0.9rem);
    }
    
    @keyframes rotate {
    0% {
        transform: rotate(-180deg);
    }
    100% {
        transform: rotate(180deg);
    }
    }
          `)
    fs.writeFileSync(`${projectName}/src/index.js`, `
const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
// eslint-disable-next-line global-require
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = () => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    frame: false,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
    },
  });

  // and load the index.html of the app.
  mainWindow.loadFile(path.join(__dirname, 'index.html'));

  // Open the DevTools.
  ipcMain.on("app/exit", () => { app.quit(); console.log("first") });
  ipcMain.on("app/minimize", () => { mainWindow.minimize(); console.log("second") });

};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
`)
    fs.writeFileSync(`${projectName}/src/preload.js`, `
// See the Electron documentation for details on how to use preload scripts:
// https://www.electronjs.org/docs/latest/tutorial/process-model#preload-scripts
const { contextBridge, ipcRenderer } = require("electron");

const API = {
    minimize: () => ipcRenderer.send("app/minimize"),
    exit: () => ipcRenderer.send("app/exit"),
}

contextBridge.exposeInMainWorld("api", API);`)


    spinner.success("Created Files");
    console.log(chalk.bgGreen(`to go in the app folder type: cd ${projectName}`))
    console.log(chalk.bgYellow(`to install the packages type: npm install`))
  } catch (err) {
    spinner.error(`An Error Occurred: ${err}`);
  }
}

async function createVueProject() {
  const spinner = createSpinner("Setting Up Data...").start();
  await sleep();

  try {
    // Create Folder
    fs.mkdirSync(projectName);
    fs.mkdirSync(`${projectName}/public`);
    fs.mkdirSync(`${projectName}/src`);

    // Create files
    fs.writeFileSync(`${projectName}/.gitignore`, `
.DS_Store
node_modules
/dist


# local env files
.env.local
.env.*.local

# Log files
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

#Electron-builder output
/dist_electron
    `);
    fs.writeFileSync(`${projectName}/babel.config.js`, `
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ]
}`)
    fs.writeFileSync(`${projectName}/jsconfig.js`, `
{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "baseUrl": "./",
    "moduleResolution": "node",
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    "lib": [
      "esnext",
      "dom",
      "dom.iterable",
      "scripthost"
    ]
  }
}`)
    fs.writeFileSync(`${projectName}/package.json`, `
  {
    "name": "vue-cli",
    "version": "0.1.0",
    "private": true,
    "scripts": {
      "serve": "vue-cli-service serve",
      "build": "vue-cli-service build",
      "lint": "vue-cli-service lint",
      "electron:build": "vue-cli-service electron:build",
      "electron:serve": "vue-cli-service electron:serve",
      "postinstall": "electron-builder install-app-deps",
      "postuninstall": "electron-builder install-app-deps"
    },
    "main": "background.js",
    "dependencies": {
      "@electron/remote": "^2.0.8",
      "core-js": "^3.8.3",
      "vue": "^3.2.13"
    },
    "devDependencies": {
      "@babel/core": "^7.12.16",
      "@babel/eslint-parser": "^7.12.16",
      "@vue/cli-plugin-babel": "~5.0.0",
      "@vue/cli-plugin-eslint": "~5.0.0",
      "@vue/cli-service": "~5.0.0",
      "electron": "^20.0.3",
      "electron-devtools-installer": "^3.1.0",
      "eslint": "^7.32.0",
      "eslint-plugin-vue": "^8.0.3",
      "vue-cli-plugin-electron-builder": "~2.1.1"
    },
    "eslintConfig": {
      "root": true,
      "env": {
        "node": true
      },
      "extends": [
        "plugin:vue/vue3-essential",
        "eslint:recommended"
      ],
      "parserOptions": {
        "parser": "@babel/eslint-parser"
      },
      "rules": {}
    },
    "browserslist": [
      "> 1%",
      "last 2 versions",
      "not dead",
      "not ie 11"
    ]
  }`)
    fs.writeFileSync(`${projectName}/vue.config.js`, `
const { defineConfig } = require('@vue/cli-service')
module.exports = defineConfig({
  transpileDependencies: true
})`)
    fs.writeFileSync(`${projectName}/src/App.vue`, `
    <template>
    <div class="images">
      <img
        src="https://media.discordapp.net/attachments/1006279919430545438/1011023078899331154/unknown.png?width=507&height=439"
        alt="Vue Icon"
      />
      <img
        src="https://media.discordapp.net/attachments/920261916704784414/1010709504788275271/observers.webp"
        alt="ObserversTeam Icon"
      />
    </div>
  
    <div class="content">
      <h1>Vuejs X Electron X ObserversTeam Template</h1>
  
      <div class="button-count">
        <button @click="func()">{{ count }}</button>
      </div>
    </div>
  </template>
  
  <script>
  export default {
    name: "App",
    data() {
      return {
        count: 0,
      };
    },
    methods: {
      func() {
        this.count++;
      },
    },
  };
  </script>
  
  <style scoped>
  body {
    padding: 0;
    margin: 0;
  }
  
  .images {
    display: flex;
    flex-direction: row;
    align-content: center;
    justify-content: center;
    margin-top: 5rem;
  }
  
  .images img {
    widows: 10rem;
    height: 10rem;
    margin-right: 1rem;
    animation: rotate 3s linear infinite;
  }
  
  .images img:last-child {
    border-radius: 100%;
    margin-left: 1rem;
  }
  
  .content h1 {
    text-align: center;
    font-size: 2rem;
    margin-top: 3rem;
  }
  
  @keyframes rotate {
    0% {
      transform: rotate(-180deg);
    }
    100% {
      transform: rotate(180deg);
    }
  }
  
  .button-count {
    display: flex;
    justify-content: center;
    align-content: center;
  }
  
  .button-count button {
    width: 10rem;
    height: 2rem;
    border: none;
    background-color: #41b883;
    color: #11457d;
    border-radius: 0.3rem;
    cursor: pointer;
  }
  </style>`)
    fs.writeFileSync(`${projectName}/src/background.js`, `
  'use strict'

import { app, protocol, BrowserWindow } from 'electron'
import { createProtocol } from 'vue-cli-plugin-electron-builder/lib'
import installExtension, { VUEJS3_DEVTOOLS } from 'electron-devtools-installer'
const isDevelopment = process.env.NODE_ENV !== 'production'

require("@electron/remote/main").initialize();

// Scheme must be registered before the app is ready
protocol.registerSchemesAsPrivileged([
  { scheme: 'app', privileges: { secure: true, standard: true } }
])

async function createWindow() {
  // Create the browser window.
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    resizable: false,
    webPreferences: {
      enableRemoteModule: true,
      nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION,
      contextIsolation: !process.env.ELECTRON_NODE_INTEGRATION
    }
  })

  if (process.env.WEBPACK_DEV_SERVER_URL) {
    // Load the url of the dev server if in development mode
    await win.loadURL(process.env.WEBPACK_DEV_SERVER_URL)
    if (!process.env.IS_TEST) win.webContents.openDevTools()
  } else {
    createProtocol('app')
    // Load the index.html when not in development
    win.loadURL('app://./index.html')
  }
}

// Quit when all windows are closed.
app.on('window-all-closed', () => {
  // On macOS it is common for applications and their menu bar
  // to stay active until the user quits explicitly with Cmd + Q
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On macOS it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) createWindow()
})

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  if (isDevelopment && !process.env.IS_TEST) {
    // Install Vue Devtools
    try {
      await installExtension(VUEJS3_DEVTOOLS)
    } catch (e) {
      console.error('Vue Devtools failed to install:', e.toString())
    }
  }
  createWindow()
})

// Exit cleanly on request from parent process in development mode.
if (isDevelopment) {
  if (process.platform === 'win32') {
    process.on('message', (data) => {
      if (data === 'graceful-exit') {
        app.quit()
      }
    })
  } else {
    process.on('SIGTERM', () => {
      app.quit()
    })
  }
}`)
    fs.writeFileSync(`${projectName}/src/main.js`, `
import { createApp } from 'vue'
import App from './App.vue'

createApp(App).mount('#app')`)
    fs.writeFileSync(`${projectName}/public/index.html`, `
<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title><%= htmlWebpackPlugin.options.title %></title>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>
  `)
    fs.writeFileSync(`${projectName}/public/index.html`, `
<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title><%= htmlWebpackPlugin.options.title %></title>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>
  `)
    spinner.success("Created Files");
    console.log(chalk.bgGreen(`to go in the app folder type: cd ${projectName}`))
    console.log(chalk.bgYellow(`to install the packages type: npm install`))
  } catch (err) {
    spinner.error(`An Error Occurred: ${err}`);
  }
}

async function createSvelteProject() {
  const spinner = createSpinner("Setting Up Data...").start();
  await sleep();

  try {
    // Create Folder
    fs.mkdirSync(projectName);
    fs.mkdirSync(`${projectName}/src`);
    fs.mkdirSync(`${projectName}/public`);
    fs.mkdirSync(`${projectName}/electron`);

    // Create files
    fs.writeFileSync(`${projectName}/rollup.config.js`, `
    import svelte from 'rollup-plugin-svelte';
import commonjs from '@rollup/plugin-commonjs';
import resolve from '@rollup/plugin-node-resolve';
import livereload from 'rollup-plugin-livereload';
import { terser } from 'rollup-plugin-terser';
import css from 'rollup-plugin-css-only';

const production = !process.env.ROLLUP_WATCH;

function serve() {
	let server;

	function toExit() {
		if (server) server.kill(0);
	}

	return {
		writeBundle() {
			if (server) return;
			server = require('child_process').spawn('npm', ['run', 'start', '--', '--dev'], {
				stdio: ['ignore', 'inherit', 'inherit'],
				shell: true
			});

			process.on('SIGTERM', toExit);
			process.on('exit', toExit);
		}
	};
}

export default {
	input: 'src/main.js',
	output: {
		sourcemap: true,
		format: 'iife',
		name: 'app',
		file: 'public/build/bundle.js'
	},
	plugins: [
		svelte({
			compilerOptions: {
				// enable run-time checks when not in production
				dev: !production
			}
		}),
		// we'll extract any component CSS out into
		// a separate file - better for performance
		css({ output: 'bundle.css' }),

		// If you have external dependencies installed from
		// npm, you'll most likely need these plugins. In
		// some cases you'll need additional configuration -
		// consult the documentation for details:
		// https://github.com/rollup/plugins/tree/master/packages/commonjs
		resolve({
			browser: true,
			dedupe: ['svelte']
		}),
		commonjs(),
		production && terser()
	],
	watch: {
		clearScreen: false
	}
};
    `);

    fs.writeFileSync(`${projectName}/package.json`, `{
  "name": "svelte-app",
  "version": "1.0.0",
  "private": true,
  "main": "./electron/index.js",
  "scripts": {
    "build": "rollup -c",
    "dev": "rollup -c -w",
    "start": "npm run build && electron ."
  },
  "devDependencies": {
    "@rollup/plugin-commonjs": "^17.0.0",
    "@rollup/plugin-node-resolve": "^11.0.0",
    "electron": "^20.0.3",
    "rollup": "^2.3.4",
    "rollup-plugin-css-only": "^3.1.0",
    "rollup-plugin-livereload": "^2.0.0",
    "rollup-plugin-svelte": "^7.0.0",
    "rollup-plugin-terser": "^7.0.0",
    "svelte": "^3.0.0"
  },
  "dependencies": {
    "sirv-cli": "^2.0.0"
  }
}`);

    fs.writeFileSync(`${projectName}/.gitignore`, `/node_modules/
/public/build/

.DS_Store`)

    fs.writeFileSync(`${projectName}/.gitignore`, `/node_modules/
/public/build/

.DS_Store`);

    fs.writeFileSync(`${projectName}/src/App.svelte`, `
<script>
  export let count = 0;

  const update_count = () => {
    count++;
  };
</script>

<main>
  <div class="images">
    <div class="image">
      <img
        src="https://media.discordapp.net/attachments/920261916704784414/1010709504788275271/observers.webp"
        alt="Observers Team Logo"
      />
    </div>
    <div class="image">
      <img
        src="https://media.discordapp.net/attachments/920261916704784414/1010709504456937523/electron.png?width=676&height=676"
        alt="ElectronJs Logo"
      />
    </div>
  </div>

  <div class="content">
    <h1>ElectronJs X SvelteJs X Observersâ„¢</h1>

    <button on:click={update_count}>Count: {count}</button>
  </div>
</main>

<style>
  main {
    text-align: center;
    padding: 1em;
    max-width: 240px;
    margin: 0 auto;
  }

  .images {
    display: flex;
    flex-direction: row;
    align-content: center;
    justify-content: center;
    margin-top: 5rem;
  }

  .images img {
    widows: 10rem;
    height: 10rem;
    margin-right: 1rem;
    animation: rotate 3s linear infinite;
  }

  .images img:last-child {
    border-radius: 100%;
    margin-left: 1rem;
  }

  .content h1 {
    text-align: center;
    font-size: 2rem;
    margin-top: 3rem;
    color: #000;
  }

  .content button {
    width: 10rem;
    height: 2rem;
    border: none;
    background-color: #f73c00;
    color: #fff;
    border-radius: 0.3rem;
    cursor: pointer;
  }

  @keyframes rotate {
    0% {
      transform: rotate(-180deg);
    }
    100% {
      transform: rotate(180deg);
    }
  }
</style>
`);

    fs.writeFileSync(`${projectName}/src/main.js`, `
import App from './App.svelte';

const app = new App({
	target: document.body,
	props: {
		name: 'world'
	}
});

export default app;`)

    fs.writeFileSync(`${projectName}/public/index.html`, `
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />

    <title>Svelte app</title>

    <link rel="stylesheet" href="global.css" />
    <link rel="stylesheet" href="build/bundle.css" />

    <script defer src="build/bundle.js"></script>
  </head>

  <body bgcolor="#fff"></body>
</html>
`);

    fs.writeFileSync(`${projectName}/public/global.css`, `
html, body {
	position: relative;
	width: 100%;
	height: 100%;
}

body {
	color: #333;
	margin: 0;
	padding: 8px;
	box-sizing: border-box;
	font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
}

a {
	color: rgb(0,100,200);
	text-decoration: none;
}

a:hover {
	text-decoration: underline;
}

a:visited {
	color: rgb(0,80,160);
}

label {
	display: block;
}

input, button, select, textarea {
	font-family: inherit;
	font-size: inherit;
	-webkit-padding: 0.4em 0;
	padding: 0.4em;
	margin: 0 0 0.5em 0;
	box-sizing: border-box;
	border: 1px solid #ccc;
	border-radius: 2px;
}

input:disabled {
	color: #ccc;
}

button {
	color: #333;
	background-color: #f4f4f4;
	outline: none;
}

button:disabled {
	color: #999;
}

button:not(:disabled):active {
	background-color: #ddd;
}

button:focus {
	border-color: #666;
}`);

    fs.writeFileSync(`${projectName}/electron/index.js`, `
const { app, BrowserWindow, ipcMain } = require("electron");
const { join } = require("path");

const isDev = !app.isPackaged;

app.whenReady().then(main);

function main() {
  const window = new BrowserWindow({
      width: 800,
      height: 600,
      show: false,
      autoHideMenuBar: true,
      webPreferences: {
          preload: join(__dirname, "./preload.js")
      }
  });

  window.loadFile(join(__dirname, "../public/index.html"));
  window.on("ready-to-show", window.show);

  if (isDev) window.webContents.openDevTools();
}`)

    fs.writeFileSync(`${projectName}/electron/preload.js`, `
  const { ipcRenderer, contextBridge } = require("electron")

  const API = {
      close: () => ipcRenderer.send("app/close"),
      minimize: () => ipcRenderer.send("app/minimize"),
  };
  
  contextBridge.exposeInMainWorld("api", API);
}`)

    spinner.success("Created Files");
    console.log(chalk.bgGreen(`to go in the app folder type: cd ${projectName}`))
    console.log(chalk.bgYellow(`to install the packages type: npm install`))
  } catch (err) {
    spinner.error(`An Error Occurred: ${err}`);
  }
}
